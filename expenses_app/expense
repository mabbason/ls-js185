#!/usr/bin/env node

const PROCESS = require('process');
const { Client } = require('pg');
const client = new Client({
    database: 'expenses'
});

const HELP = `An expense recording system

Commands:

add AMOUNT MEMO [DATE] - record a new expense
clear - delete all expenses
list - list all expenses
delete NUMBER - remove expense with id NUMBER
search QUERY - list expenses with a matching memo field`

class ExpenseData {
  constructor() {
    let client = new Client({ database: 'expenses' });
  }

  async listExpenses() {
    await client.connect().catch(err => logAndExit(err));
  
    let res = await client.query("SELECT * FROM expenses ORDER BY created_on ASC")
                          .catch(err => logAndExit(err));
  
    res.rows.forEach(tuple => {
      let columns = [
        `${tuple.id}`.padStart(3),
        tuple.created_on.toDateString().padStart(10),
        tuple.amount.padStart(12),
        tuple.memo
      ];
  
      console.log(columns.join(' | '));
    });
  
    await client.end();
  }

  async addExpense(amount, memo) {
    await client.connect().catch(err => logAndExit(err));
  
    let date = new Date();
    date = date.toLocaleDateString();
  
    let sqlText = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)';
    let values = [amount, memo];
  
    await client.query(sqlText, values)
                .catch(err => logAndExit(err));
  
    await client.end();
  }
}

function displayHelp() {
  console.log(HELP);
};





function logAndExit(err) {
  console.log(`Error: ${err.message}`);
  PROCESS.exit(1);
}

let args = PROCESS.argv;
let command = args[2];

if (command === 'list') {
  listExpenses();
} else if (command === 'add') {
  let amount = args[3];
  let memo = args[4];
  if (amount && memo) {
    addExpense(amount, memo);
  } else {
    console.log('You must provide an amount and memo.')
  }
} else {
  displayHelp();
}